// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	TodaysDateRes
	Void
	ConvADToBSRes
	ConvADToBSReq
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TodaysDateRes struct {
	Date string `protobuf:"bytes,1,opt,name=date" json:"date,omitempty"`
}

func (m *TodaysDateRes) Reset()                    { *m = TodaysDateRes{} }
func (m *TodaysDateRes) String() string            { return proto.CompactTextString(m) }
func (*TodaysDateRes) ProtoMessage()               {}
func (*TodaysDateRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TodaysDateRes) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

type Void struct {
}

func (m *Void) Reset()                    { *m = Void{} }
func (m *Void) String() string            { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()               {}
func (*Void) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ConvADToBSRes struct {
	Date string `protobuf:"bytes,1,opt,name=date" json:"date,omitempty"`
}

func (m *ConvADToBSRes) Reset()                    { *m = ConvADToBSRes{} }
func (m *ConvADToBSRes) String() string            { return proto.CompactTextString(m) }
func (*ConvADToBSRes) ProtoMessage()               {}
func (*ConvADToBSRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ConvADToBSRes) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

type ConvADToBSReq struct {
	Mm int32 `protobuf:"varint,1,opt,name=mm" json:"mm,omitempty"`
	Dd int32 `protobuf:"varint,2,opt,name=dd" json:"dd,omitempty"`
	Yy int32 `protobuf:"varint,3,opt,name=yy" json:"yy,omitempty"`
}

func (m *ConvADToBSReq) Reset()                    { *m = ConvADToBSReq{} }
func (m *ConvADToBSReq) String() string            { return proto.CompactTextString(m) }
func (*ConvADToBSReq) ProtoMessage()               {}
func (*ConvADToBSReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ConvADToBSReq) GetMm() int32 {
	if m != nil {
		return m.Mm
	}
	return 0
}

func (m *ConvADToBSReq) GetDd() int32 {
	if m != nil {
		return m.Dd
	}
	return 0
}

func (m *ConvADToBSReq) GetYy() int32 {
	if m != nil {
		return m.Yy
	}
	return 0
}

func init() {
	proto.RegisterType((*TodaysDateRes)(nil), "api.TodaysDateRes")
	proto.RegisterType((*Void)(nil), "api.Void")
	proto.RegisterType((*ConvADToBSRes)(nil), "api.ConvADToBSRes")
	proto.RegisterType((*ConvADToBSReq)(nil), "api.ConvADToBSReq")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Nepcal service

type NepcalClient interface {
	TodaysDate(ctx context.Context, in *Void, opts ...grpc.CallOption) (*TodaysDateRes, error)
	ConvADToBS(ctx context.Context, in *ConvADToBSReq, opts ...grpc.CallOption) (*ConvADToBSRes, error)
}

type nepcalClient struct {
	cc *grpc.ClientConn
}

func NewNepcalClient(cc *grpc.ClientConn) NepcalClient {
	return &nepcalClient{cc}
}

func (c *nepcalClient) TodaysDate(ctx context.Context, in *Void, opts ...grpc.CallOption) (*TodaysDateRes, error) {
	out := new(TodaysDateRes)
	err := grpc.Invoke(ctx, "/api.Nepcal/TodaysDate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nepcalClient) ConvADToBS(ctx context.Context, in *ConvADToBSReq, opts ...grpc.CallOption) (*ConvADToBSRes, error) {
	out := new(ConvADToBSRes)
	err := grpc.Invoke(ctx, "/api.Nepcal/ConvADToBS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Nepcal service

type NepcalServer interface {
	TodaysDate(context.Context, *Void) (*TodaysDateRes, error)
	ConvADToBS(context.Context, *ConvADToBSReq) (*ConvADToBSRes, error)
}

func RegisterNepcalServer(s *grpc.Server, srv NepcalServer) {
	s.RegisterService(&_Nepcal_serviceDesc, srv)
}

func _Nepcal_TodaysDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NepcalServer).TodaysDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Nepcal/TodaysDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NepcalServer).TodaysDate(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nepcal_ConvADToBS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvADToBSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NepcalServer).ConvADToBS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Nepcal/ConvADToBS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NepcalServer).ConvADToBS(ctx, req.(*ConvADToBSReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Nepcal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Nepcal",
	HandlerType: (*NepcalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TodaysDate",
			Handler:    _Nepcal_TodaysDate_Handler,
		},
		{
			MethodName: "ConvADToBS",
			Handler:    _Nepcal_ConvADToBS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x54, 0x52, 0xe6, 0xe2, 0x0d, 0xc9,
	0x4f, 0x49, 0xac, 0x2c, 0x76, 0x49, 0x2c, 0x49, 0x0d, 0x4a, 0x2d, 0x16, 0x12, 0xe2, 0x62, 0x49,
	0x49, 0x2c, 0x49, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0xd8, 0xb8, 0x58,
	0xc2, 0xf2, 0x33, 0x53, 0x40, 0x8a, 0x9d, 0xf3, 0xf3, 0xca, 0x1c, 0x5d, 0x42, 0xf2, 0x9d, 0x82,
	0x71, 0x29, 0xb6, 0x47, 0x55, 0x54, 0x28, 0xc4, 0xc7, 0xc5, 0x94, 0x9b, 0x0b, 0x56, 0xc2, 0x1a,
	0xc4, 0x94, 0x9b, 0x0b, 0xe2, 0xa7, 0xa4, 0x48, 0x30, 0x41, 0xf8, 0x29, 0x29, 0x20, 0x7e, 0x65,
	0xa5, 0x04, 0x33, 0x84, 0x5f, 0x59, 0x69, 0x94, 0xcf, 0xc5, 0xe6, 0x97, 0x5a, 0x90, 0x9c, 0x98,
	0x23, 0xa4, 0xcb, 0xc5, 0x85, 0x70, 0x9c, 0x10, 0xa7, 0x1e, 0xc8, 0xed, 0x20, 0x87, 0x48, 0x09,
	0x81, 0x99, 0x28, 0x0e, 0x57, 0x62, 0x10, 0x32, 0xe3, 0xe2, 0x42, 0xd8, 0x2c, 0x04, 0x51, 0x83,
	0xe2, 0x14, 0x29, 0x4c, 0xb1, 0x62, 0x25, 0x86, 0x24, 0x36, 0x70, 0x78, 0x18, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x2e, 0xea, 0x48, 0xb8, 0x1c, 0x01, 0x00, 0x00,
}
